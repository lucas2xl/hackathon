import { ai, JSON_CONFIG } from "../config/gemini";
import { prisma } from "../lib/prisma";
import { audioService } from "../services/audio";
import { slackService } from "../services/slack";

export async function generateWeeklyPodcast(): Promise<string> {
  console.log("üéôÔ∏è Iniciando gera√ß√£o do podcast semanal...");

  try {
    // 1) Calcular per√≠odo dos √∫ltimos 7 dias
    const { weekStart, weekEnd } = getLastWeekPeriod();
    console.log(
      `üìÖ Per√≠odo (√∫ltimos 7 dias): ${weekStart.toLocaleDateString(
        "pt-BR"
      )} a ${weekEnd.toLocaleDateString("pt-BR")}`
    );

    // 2) Buscar trends da semana
    const weeklyTrends = await getWeeklyTrends(weekStart, weekEnd);
    console.log(`üìä Encontrados ${weeklyTrends.length} trends da semana`);

    if (weeklyTrends.length === 0) {
      console.log("‚ö†Ô∏è Nenhum trend encontrado para a semana");
      return "";
    }

    // 3) Gerar conte√∫do do podcast
    const podcastContent = await generatePodcastScript(
      weeklyTrends,
      weekStart,
      weekEnd
    );

    // 4) Gerar √°udio do podcast
    const audioFilename = `podcast-${weekStart.toISOString().split("T")[0]}-${
      weekEnd.toISOString().split("T")[0]
    }`;
    const audioUrl = await audioService.generateAudio(
      podcastContent,
      audioFilename
    );

    if (audioUrl) {
      console.log(`üéµ √Åudio gerado: ${audioUrl}`);
    }

    // 5) Salvar no banco
    await prisma.weeklyPodcast.create({
      data: {
        weekStart,
        weekEnd,
        content: podcastContent,
        audioUrl: audioUrl,
      },
    });

    // 6) Enviar notifica√ß√£o para Slack
    try {
      await slackService.sendPodcastNotification(
        podcastContent,
        weekStart,
        weekEnd,
        audioUrl || undefined // Passar audioUrl se dispon√≠vel
      );
      console.log("‚úÖ Podcast enviado para Slack");
    } catch (slackError) {
      console.error("‚ùå Erro ao enviar para Slack:", slackError);
    }

    console.log("‚úÖ Podcast gerado e salvo com sucesso!");
    return podcastContent;
  } catch (error) {
    console.error("‚ùå Erro na gera√ß√£o do podcast:", error);
    return "";
  }
}

function getLastWeekPeriod() {
  const now = new Date();

  // Buscar os √∫ltimos 7 dias incluindo hoje
  const weekEnd = new Date(now);
  weekEnd.setHours(23, 59, 59, 999);

  const weekStart = new Date(now);
  weekStart.setDate(now.getDate() - 6); // 7 dias atr√°s
  weekStart.setHours(0, 0, 0, 0);

  return { weekStart, weekEnd };
}

async function getWeeklyTrends(weekStart: Date, weekEnd: Date) {
  return await prisma.trend.findMany({
    where: {
      createdAt: { gte: weekStart, lte: weekEnd },
      isRelevant: true,
    },
    include: { news: true },
    orderBy: [{ relevance: "desc" }, { createdAt: "desc" }],
    take: 25, // M√°ximo 25 trends da semana
  });
}

async function generatePodcastScript(
  trends: any[],
  weekStart: Date,
  weekEnd: Date
): Promise<string> {
  console.log("ü§ñ Gerando roteiro do podcast com IA...");

  const topScenarios = trends.slice(0, 15); // Top 15 para o podcast
  const weekStartStr = weekStart.toLocaleDateString("pt-BR");
  const weekEndStr = weekEnd.toLocaleDateString("pt-BR");

  // Agrupar por categoria
  const scenariosByCategory = topScenarios.reduce((acc: any, trend) => {
    const category = trend.category || "Outros";
    if (!acc[category]) acc[category] = [];
    acc[category].push(trend);
    return acc;
  }, {});

  // Formatar cen√°rios para o prompt
  const formatScenariosForPrompt = (scenarios: any[]) => {
    return scenarios
      .map(
        (s, idx) =>
          `${idx + 1}. ${s.title || s.term} (Relev√¢ncia: ${
            s.relevance || "N/A"
          }/10)
   Categoria: ${s.category || "N/A"}
   Descri√ß√£o: ${s.description || "Sem descri√ß√£o"}
   Not√≠cias relacionadas: ${s.news?.length || 0}`
      )
      .join("\n\n");
  };

  const prompt = `
Crie um roteiro completo de podcast SOBRE OS PRINCIPAIS CEN√ÅRIOS E TEND√äNCIAS ESTRAT√âGICAS (baseado nos dados abaixo). N√ÉO inclua datas, N√ÉO escreva tempos de dura√ß√£o, N√ÉO use nome de apresentador, N√ÉO pe√ßa para assinar ou seguir. Apenas entregue o conte√∫do direto, profissional e consultivo.

DADOS DA SEMANA (contexto para voc√™, n√£o repita como bloco literal):
${formatScenariosForPrompt(topScenarios)}

CATEGORIAS PRINCIPAIS (contexto):
${Object.entries(scenariosByCategory)
  .map(
    ([cat, scenarios]: [string, any]) => `${cat}: ${scenarios.length} cen√°rios`
  )
  .join("\n")}

INSTRU√á√ïES:
- Tom: profissional, claro, direto, com autoridade estrat√©gica.
- Estrutura obrigat√≥ria em Markdown usando EXATAMENTE estes cabe√ßalhos, sem tempos entre par√™nteses:
  ## [ABERTURA]
  ## [CEN√ÅRIOS PRINCIPAIS]
  (Dentro desta se√ß√£o gerar de 5 a 7 blocos numerados como ### [CEN√ÅRIO X] T√çTULO)
  ## [AN√ÅLISE ESTRAT√âGICA]
  ## [FECHAMENTO]
- Em [ABERTURA]: contextualize brevemente o prop√≥sito do epis√≥dio sem citar datas ou "bem-vindo" pessoalizado.
- Em cada [CEN√ÅRIO X]:
  * Contextualiza√ß√£o objetiva
  * Impactos estrat√©gicos
  * Oportunidades / riscos / a√ß√µes pr√°ticas
  * Transi√ß√£o sutil para o pr√≥ximo (exceto no √∫ltimo)
- Em [AN√ÅLISE ESTRAT√âGICA]: conecte padr√µes, converg√™ncias e implica√ß√µes.
- Em [FECHAMENTO]: s√≠ntese final + chamada √† reflex√£o (SEM pedir para seguir, assinar, curtir, ou chamar o ouvinte para pr√≥ximos epis√≥dios, e sem despedidas do tipo "at√© a pr√≥xima semana").
- N√ÉO incluir tempos de dura√ß√£o, nomes, datas, faixas de data, placeholders como [Seu Nome].
- N√ÉO incluir se√ß√µes extras.
- N√ÉO gerar JSON, apenas Markdown final.

Retorne APENAS o roteiro Markdown final conforme instru√ß√µes.`;

  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt,
      config: JSON_CONFIG,
    });

    const podcastScript = response.text || "";
    console.log("‚úÖ Roteiro do podcast gerado com sucesso!");
    console.log(
      "üìù Primeiros 300 caracteres:",
      podcastScript.substring(0, 300) + "..."
    );

    return podcastScript;
  } catch (error) {
    console.error("‚ùå Erro na gera√ß√£o do roteiro:", error);

    // Fallback manual
    return generateFallbackPodcast(topScenarios, weekStartStr, weekEndStr);
  }
}

function generateFallbackPodcast(
  scenarios: any[],
  weekStart: string,
  weekEnd: string
): string {
  return `
# Podcast TD Trends - Semana de ${weekStart} a ${weekEnd}

## [ABERTURA] (1 minuto)

Ol√° e bem-vindos ao TD Trends, seu podcast semanal de an√°lise estrat√©gica de tend√™ncias e cen√°rios de neg√≥cios. Eu sou seu host e hoje vamos analisar os principais movimentos da semana que passou.

Esta semana identificamos ${
    scenarios.length
  } cen√°rios estrat√©gicos relevantes para o mundo dos neg√≥cios e tecnologia. Vamos mergulhar nos insights mais importantes e entender como eles podem impactar suas decis√µes estrat√©gicas.

## [CEN√ÅRIOS PRINCIPAIS] (10 minutos)

${scenarios
  .slice(0, 5)
  .map(
    (scenario, index) => `
### [CEN√ÅRIO ${index + 1}] - ${scenario.title || scenario.term}

${scenario.description || "An√°lise em desenvolvimento"}

**Implica√ß√µes estrat√©gicas**: Este cen√°rio apresenta oportunidades de ${
      scenario.category || "desenvolvimento"
    } que devem ser monitoradas pelos gestores.
`
  )
  .join("\n")}

## [AN√ÅLISE ESTRAT√âGICA] (3 minutos)

Conectando todos esses cen√°rios, observamos um padr√£o interessante de transforma√ß√£o digital e adapta√ß√£o estrat√©gica. As organiza√ß√µes que conseguirem antecipar essas tend√™ncias ter√£o vantagens competitivas significativas.

## [FECHAMENTO] (1 minuto)

Esses foram os principais insights da semana. Continue acompanhando o TD Trends para n√£o perder nenhuma tend√™ncia estrat√©gica importante.

At√© a pr√≥xima semana!
`;
}
